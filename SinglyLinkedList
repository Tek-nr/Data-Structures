#include <stdio.h>
int lengthOfList = 0;

struct Node {
	int data;
	struct Node* next;
};

void printList(struct Node* node) {
	printf("\nCurrent Linked list is: ");
	while (node != NULL) {
		printf(" %d ", node->data);
		node = node->next;
	}
	printf("\nThe length of the list: %d\n", lengthOfList);
	return;
}

//Reversed list










//INSERTING A NODE
//inserting a node at the front
void push(struct Node** head_ref, int new_data) {
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	newNode->data = new_data;
	newNode->next = (*head_ref);
	(*head_ref) = newNode;
	lengthOfList++;
	return;
}

//inserting a node after a given node
void insertAfter(struct Node** head_ref, int prevData, int new_data) {
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	newNode->data = new_data;
	struct Node *temp = *head_ref;
	struct Node *temp2 = *head_ref;

	if ((*head_ref) == NULL) {
		push(head_ref, new_data);
		return;
	}

	
	while (temp->data != prevData) {
		if (temp->next == NULL) //Don't add the new node if the given prev_data isn't in the list
			return;
		temp = temp->next;
	}
		newNode->next = temp->next;
		temp->next = newNode;
		lengthOfList++;
}

void insertBefore(struct Node** head_ref, int nextData, int newData) {
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	newNode->data = newData;
	struct Node* temp = (*head_ref);
	struct Node* temp2 = (*head_ref);

	if (temp == NULL || temp->data == nextData) {
		push(head_ref, newData);
		return;
	}

	while (temp->next->data!=nextData)
	{
		if (temp->next->next == NULL)
			return;
		temp = temp->next;
	}

	newNode->next = temp->next;
	temp->next = newNode;
	lengthOfList++;
}

//inserting a node at the end
void append(struct Node** head_ref, int new_data) {
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	struct Node *last =  *head_ref;

	newNode->data = new_data;
	newNode->next = NULL;

	if (*head_ref == NULL) {
		push(head_ref, new_data);
		return;
	}

	while (last->next != NULL)
		last = last->next;

	last->next = newNode;
	lengthOfList++;
	return;
}

//inserting a node at nth position
void insertNth(struct Node** head_ref, int n, int n_data) {
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	newNode->data = n_data;
	struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
	temp = *head_ref;
	int i = 1;

	if (n == 0) { //add the node as head if the list is empty
		push(head_ref, n_data);
		return;
	}

	else if (n == lengthOfList) { //add the node at the front if the n is equal the last index
		append(head_ref, n_data);
		return;
	}

	else if (n < 0 || n > lengthOfList - 1) { //return the function if the n is an invalid value
		printf("\nInvalid index! (%d)\n",n);
		return;
	}

	while (i != n) {
		temp = temp->next;
		i++;
	}
	newNode->next = temp->next;
	temp->next = newNode;
	lengthOfList++;
}

//DELETING A NODE
void deleteNode(struct Node** head_ref, int node_data) {
	struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
	struct Node* prev = (struct Node*)malloc(sizeof(struct Node));
	temp = (*head_ref);
	prev = (*head_ref);

	//return if head is NULL
	if ((*head_ref) == NULL)
		return;

	//if the given node is the head
	else if ((*head_ref)->data == node_data) {
		*head_ref= temp->next; //changed head
		free(temp);
		lengthOfList--;
		return;
	}

	while (temp->next != NULL && temp->data != node_data) {
		prev = temp;
		temp = temp->next;
	}

	if(temp==NULL || temp->data != node_data) {
		printf("\nThe given node is not in the list!\n");
		return;
	}

	prev->next = temp->next;
	free(temp);
	lengthOfList--;
}

//Deleting a node at nth position










//Deleting all linked list
void deleteLinkedList(struct Node** head_ref) {
	struct Node* current = (struct Node*)malloc(sizeof(struct Node));
	struct Node* next = (struct Node*)malloc(sizeof(struct Node));
	current = (*head_ref);

	if (current == NULL)
		return;

	while (current != NULL) {
		next = current->next;
		free(current);
		current = next;
		lengthOfList--;
	}
	*head_ref = NULL;
	printf("\nLinked list has been deleted!\n");
}

//MOVING A NODE









int main() {
	struct Node* head = NULL;

	deleteLinkedList(&head);
	push(&head, 88);
	append(&head, 6);
	append(&head, 5);
	push(&head, 7);
	printList(head);


	deleteNode(&head, 10);
	deleteNode(&head, 9);
	deleteNode(&head, 7);
	deleteNode(&head, 5);
	deleteNode(&head, 6);
	printList(head);

	push(&head, 10);
	push(&head, 9);
	push(&head, 8);
	insertAfter(&head, 8, 17);
	insertAfter(&head, 10, 55);
	insertAfter(&head, 5, 15);
	insertAfter(&head, 15, 20);
	push(&head, 66);
	insertBefore(&head, 10, 5);
	insertBefore(&head, 6, 4);
	printList(head);

	insertNth(&head, 0, 5);
	printList(head);	
	insertNth(&head, lengthOfList, 10);
	insertNth(&head, lengthOfList, 100);
	insertNth(&head, 0, 100);
	insertNth(&head, 1000, 10000000);
	printList(head);

	deleteLinkedList(&head);
	insertNth(&head, 55, 100);
	insertNth(&head, lengthOfList, 100);
	insertNth(&head, 1, 1001);
	printList(head);
	
	insertNth(&head, 2, 1101);
	insertNth(&head, 1, 1111);
	insertNth(&head, 0, 44);
	insertNth(&head, lengthOfList, 55);
	printList(head);

	deleteLinkedList(&head);
	printList(head);
}
