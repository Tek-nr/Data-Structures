#include <stdio.h>

struct Node {
	int data;
	struct Node* next;
};

void printList(struct Node* node) {
	while (node != NULL) {
		printf(" %d ", node->data);
		node = node->next;
	}
	return;
}

//INSERTING A NODE

//inserting a node at the front
void push(struct Node** head_ref, int new_data) {
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	newNode->data = new_data;
	newNode->next = (*head_ref);
	(*head_ref) = newNode;
}

//inserting a node after a given node
/*void insertAfter(struct Node* prev_node, int new_data) {
	if (prev_node == NULL) {
		printf("The previous node cannot be NULL!");
		return;
	}

	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	newNode->data = new_data;
	newNode->next = prev_node->next;
	prev_node->next = newNode;
}*/

//inserting a node after a given node
void insertAfter(struct Node** head_ref, int prevData, int new_data) {
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	newNode->data = new_data;
	struct Node *temp = *head_ref;
	struct Node *temp2 = *head_ref;

	if ((*head_ref) == NULL) {
		push(head_ref, new_data);
		return;
	}

	//Don't add the new node if the given prev_data isn't in the list
	while (temp->data != prevData) {
		if (temp->next == NULL)
			return;
		temp = temp->next;
	}
		newNode->next = temp->next;
		temp->next = newNode;
}

void insertBefore(struct Node** head_ref, int nextData, int newData) {
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	newNode->data = newData;
	struct Node* temp = (*head_ref);
	struct Node* temp2 = (*head_ref);

	if (temp == NULL || temp->data == nextData) {
		push(head_ref, newData);
		return;
	}

	while (temp->next->data!=nextData)
	{
		if (temp->next->next == NULL)
			return;
		temp = temp->next;
	}

	newNode->next = temp->next;
	temp->next = newNode;
}

//inserting a node at the end
void append(struct Node** head_ref, int new_data) {
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	struct Node *last =  *head_ref;

	newNode->data = new_data;
	newNode->next = NULL;

	if (*head_ref == NULL) {
		*head_ref = newNode;
		return;
	}

	while (last->next != NULL)
		last = last->next;

	last->next = newNode;
	return;
}

void deleteNode(struct Node** head_ref, int node_data) {
	struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
	struct Node* prev = (struct Node*)malloc(sizeof(struct Node));
	temp = (*head_ref);
	prev = (*head_ref);

	//return if head is NULL
	if ((*head_ref) == NULL)
		return;

	//if the given node is the head
	else if ((*head_ref)->data == node_data) {
		*head_ref= temp->next; //changed head
		free(temp);
		return;
	}

	while (temp->next != NULL && temp->data != node_data) {
		prev = temp;
		temp = temp->next;
	}

	if(temp==NULL || temp->data != node_data) {
		printf("\nThe given node is not in the list!");
		return;
	}

	prev->next = temp->next;
	free(temp);

}

int main() {
	struct Node* head = NULL;

	append(&head, 6);
	append(&head, 5);
	push(&head, 7);
	printf("\nCreated Linked list is: ");
	printList(head);


	deleteNode(&head, 10);
	deleteNode(&head, 9);
	deleteNode(&head, 7);
	deleteNode(&head, 5);
	deleteNode(&head, 6);
	printf("\nCreated Linked list is: ");
	printList(head);

	push(&head, 10);
	push(&head, 9);
	push(&head, 8);
	insertAfter(&head, 8, 17);
	insertAfter(&head, 10, 55);
	insertAfter(&head, 5, 15);
	insertAfter(&head, 15, 20);
	push(&head, 66);
	insertBefore(&head, 10, 5);
	insertBefore(&head, 6, 4);
	printf("\nCreated Linked list is: ");
	printList(head);
}
